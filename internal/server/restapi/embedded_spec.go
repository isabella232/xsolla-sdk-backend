// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is example server implementing some demonstration functions",
    "title": "Xsolla Sdk Backend",
    "contact": {
      "email": "integration@xsolla.com"
    },
    "version": "0.0.1"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/healthcheck": {
      "get": {
        "description": "Healthcheck",
        "tags": [
          "Healthcheck"
        ],
        "summary": "Healthcheck application",
        "operationId": "healthcheck",
        "responses": {
          "200": {
            "description": "Service available."
          },
          "503": {
            "description": "Service unavailable."
          }
        }
      }
    },
    "/login": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "Create or login user by email and return access token",
        "operationId": "login",
        "parameters": [
          {
            "description": "Credentials",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/credentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User access token received",
            "schema": {
              "$ref": "#/definitions/accessToken"
            }
          },
          "400": {
            "description": "Incorrect request parameters",
            "schema": {
              "$ref": "#/definitions/404"
            }
          },
          "401": {
            "description": "Incorrect authorization data",
            "schema": {
              "$ref": "#/definitions/401"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "401": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code",
          "type": "string",
          "maxLength": 10,
          "example": "003-001"
        },
        "description": {
          "type": "string",
          "maxLength": 100,
          "example": "Wrong email format"
        }
      }
    },
    "404": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code",
          "type": "string",
          "maxLength": 10,
          "example": "0"
        },
        "description": {
          "type": "string",
          "maxLength": 100,
          "example": "Your request has invalid parameters."
        }
      }
    },
    "accessToken": {
      "type": "object",
      "properties": {
        "access_token": {
          "description": "User's access token",
          "type": "string",
          "maxLength": 255,
          "example": "eop57k1boA7nnYPtewZ6KEXJyJADEwRT"
        }
      }
    },
    "credentials": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "description": "Email of the user.",
          "type": "string",
          "format": "email",
          "maxLength": 50,
          "example": "michael.kolen@gmail.com"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Working with Xsolla Backend.",
      "name": "Xsolla SDK Backend"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is example server implementing some demonstration functions",
    "title": "Xsolla Sdk Backend",
    "contact": {
      "email": "integration@xsolla.com"
    },
    "version": "0.0.1"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/healthcheck": {
      "get": {
        "description": "Healthcheck",
        "tags": [
          "Healthcheck"
        ],
        "summary": "Healthcheck application",
        "operationId": "healthcheck",
        "responses": {
          "200": {
            "description": "Service available."
          },
          "503": {
            "description": "Service unavailable."
          }
        }
      }
    },
    "/login": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "login"
        ],
        "summary": "Create or login user by email and return access token",
        "operationId": "login",
        "parameters": [
          {
            "description": "Credentials",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/credentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User access token received",
            "schema": {
              "$ref": "#/definitions/accessToken"
            }
          },
          "400": {
            "description": "Incorrect request parameters",
            "schema": {
              "$ref": "#/definitions/404"
            }
          },
          "401": {
            "description": "Incorrect authorization data",
            "schema": {
              "$ref": "#/definitions/401"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "401": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code",
          "type": "string",
          "maxLength": 10,
          "example": "003-001"
        },
        "description": {
          "type": "string",
          "maxLength": 100,
          "example": "Wrong email format"
        }
      }
    },
    "404": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code",
          "type": "string",
          "maxLength": 10,
          "example": "0"
        },
        "description": {
          "type": "string",
          "maxLength": 100,
          "example": "Your request has invalid parameters."
        }
      }
    },
    "accessToken": {
      "type": "object",
      "properties": {
        "access_token": {
          "description": "User's access token",
          "type": "string",
          "maxLength": 255,
          "example": "eop57k1boA7nnYPtewZ6KEXJyJADEwRT"
        }
      }
    },
    "credentials": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "description": "Email of the user.",
          "type": "string",
          "format": "email",
          "maxLength": 50,
          "example": "michael.kolen@gmail.com"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Working with Xsolla Backend.",
      "name": "Xsolla SDK Backend"
    }
  ]
}`))
}
